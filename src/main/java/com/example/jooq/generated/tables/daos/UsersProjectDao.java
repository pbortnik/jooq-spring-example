/*
 * This file is generated by jOOQ.
*/
package com.example.jooq.generated.tables.daos;

import com.example.jooq.generated.tables.Project;
import com.example.jooq.generated.tables.Users;
import com.example.jooq.generated.tables.UsersProject;
import com.example.jooq.generated.tables.records.UsersProjectRecord;
import org.jooq.Configuration;
import org.jooq.Record;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;
import org.jooq.impl.DefaultDSLContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import javax.annotation.Generated;
import javax.persistence.Inheritance;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = { "http://www.jooq.org", "jOOQ version:3.10.4" }, comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
@Inheritance
public class UsersProjectDao
		extends DAOImpl<UsersProjectRecord, com.example.jooq.generated.tables.pojos.UsersProject, Record2<Integer, Integer>> {

	@Autowired
	private DefaultDSLContext dsl;

	/**
	 * Create a new UsersProjectDao without any configuration
	 */
	public UsersProjectDao() {
		super(UsersProject.USERS_PROJECT, com.example.jooq.generated.tables.pojos.UsersProject.class);
	}

	/**
	 * Create a new UsersProjectDao with an attached configuration
	 */
	@Autowired
	public UsersProjectDao(Configuration configuration) {
		super(UsersProject.USERS_PROJECT, com.example.jooq.generated.tables.pojos.UsersProject.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Record2<Integer, Integer> getId(com.example.jooq.generated.tables.pojos.UsersProject object) {
		return compositeKeyRecord(object.getProjectId(), object.getUserId());
	}

	/**
	 * Fetch records that have <code>project_id IN (values)</code>
	 */
	public List<com.example.jooq.generated.tables.pojos.UsersProject> fetchByProjectId(Integer... values) {
		return fetch(UsersProject.USERS_PROJECT.PROJECT_ID, values);
	}

	/**
	 * Fetch records that have <code>user_id IN (values)</code>
	 */
	public List<com.example.jooq.generated.tables.pojos.UsersProject> fetchByUserId(Integer... values) {
		return fetch(UsersProject.USERS_PROJECT.USER_ID, values);
	}

	public Map<String, List<com.example.jooq.generated.tables.pojos.Project>> joinAll() {
		Users u = Users.USERS;
		Project p = Project.PROJECT;
		UsersProject up = UsersProject.USERS_PROJECT;
		Map<String, List<com.example.jooq.generated.tables.pojos.Project>> collect = dsl.select(u.LOGIN, p.NAME, p.ID, p.CREATED_ON)
				.from(up)
				.join(u)
				.on(u.ID.eq(up.USER_ID))
				.join(p)
				.on(p.ID.eq(up.PROJECT_ID))
				.fetch()
				.stream()
				.collect(Collectors.groupingBy(r -> r.getValue(Users.USERS.LOGIN), Collectors.mapping(to_project, Collectors.toList())));
		return collect;
	}

	public static Function<Record, com.example.jooq.generated.tables.pojos.Project> to_project = r -> {
		com.example.jooq.generated.tables.pojos.Project project = new com.example.jooq.generated.tables.pojos.Project();
		project.setId(r.getValue(Project.PROJECT.ID));
		project.setName(r.getValue(Project.PROJECT.NAME));
		project.setCreatedOn(r.getValue(Project.PROJECT.CREATED_ON));
		return project;
	};
}
